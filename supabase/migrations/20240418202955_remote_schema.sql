
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "http" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."handle_new_user"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."comments" (
    "comment_id" integer NOT NULL,
    "body" "text",
    "created_at" timestamp with time zone,
    "slug" "text",
    "user_id" "uuid",
    "parent_id" integer
);

ALTER TABLE "public"."comments" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."comments_comment_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."comments_comment_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."comments_comment_id_seq" OWNED BY "public"."comments"."comment_id";

CREATE SEQUENCE IF NOT EXISTS "public"."ingredients_ingredient_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."ingredients_ingredient_id_seq" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."ingredients" (
    "ingredient_id" integer DEFAULT "nextval"('"public"."ingredients_ingredient_id_seq"'::"regclass") NOT NULL,
    "recipe_id" integer,
    "name" character varying,
    "quantity" character varying,
    "unit" "text",
    "profile_id" "uuid"
);

ALTER TABLE "public"."ingredients" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."likes" (
    "like_id" integer NOT NULL,
    "created_at" timestamp with time zone,
    "profile_id" "uuid",
    "recipe_id" integer
);

ALTER TABLE "public"."likes" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."likes_like_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."likes_like_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."likes_like_id_seq" OWNED BY "public"."likes"."like_id";

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone,
    "username" "text",
    "full_name" "text",
    "avatar_url" "text",
    "website" "text",
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."ratings" (
    "rating_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "rating" real NOT NULL,
    "profile_id" "uuid" NOT NULL,
    "recipe_id" integer NOT NULL
);

ALTER TABLE "public"."ratings" OWNER TO "postgres";

ALTER TABLE "public"."ratings" ALTER COLUMN "rating_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."ratings_rating_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE SEQUENCE IF NOT EXISTS "public"."recipes_recipe_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."recipes_recipe_id_seq" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."recipes" (
    "recipe_id" integer DEFAULT "nextval"('"public"."recipes_recipe_id_seq"'::"regclass") NOT NULL,
    "profile_id" "uuid",
    "title" character varying,
    "description" "text",
    "instructions" "text",
    "image_url" "text",
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone
);

ALTER TABLE "public"."recipes" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."steps" (
    "step_id" integer NOT NULL,
    "recipe_id" integer NOT NULL,
    "step_number" integer NOT NULL,
    "instruction" "text" NOT NULL,
    "duration" integer
);

ALTER TABLE "public"."steps" OWNER TO "postgres";

CREATE SEQUENCE IF NOT EXISTS "public"."steps_step_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;

ALTER TABLE "public"."steps_step_id_seq" OWNER TO "postgres";

ALTER SEQUENCE "public"."steps_step_id_seq" OWNED BY "public"."steps"."step_id";

ALTER TABLE ONLY "public"."comments" ALTER COLUMN "comment_id" SET DEFAULT "nextval"('"public"."comments_comment_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."likes" ALTER COLUMN "like_id" SET DEFAULT "nextval"('"public"."likes_like_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."steps" ALTER COLUMN "step_id" SET DEFAULT "nextval"('"public"."steps_step_id_seq"'::"regclass");

ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_pkey" PRIMARY KEY ("comment_id");

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "ingredients_pkey" PRIMARY KEY ("ingredient_id");

ALTER TABLE ONLY "public"."likes"
    ADD CONSTRAINT "likes_pkey" PRIMARY KEY ("like_id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");

ALTER TABLE ONLY "public"."ratings"
    ADD CONSTRAINT "ratings_pkey" PRIMARY KEY ("rating_id");

ALTER TABLE ONLY "public"."recipes"
    ADD CONSTRAINT "recipes_pkey" PRIMARY KEY ("recipe_id");

ALTER TABLE ONLY "public"."steps"
    ADD CONSTRAINT "steps_pkey" PRIMARY KEY ("step_id");

ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_parent_id_fkey" FOREIGN KEY ("parent_id") REFERENCES "public"."comments"("comment_id");

ALTER TABLE ONLY "public"."comments"
    ADD CONSTRAINT "comments_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."steps"
    ADD CONSTRAINT "fk_recipe" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("recipe_id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."likes"
    ADD CONSTRAINT "likes_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id");

ALTER TABLE ONLY "public"."likes"
    ADD CONSTRAINT "likes_recipe_id_fkey" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("recipe_id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."ingredients"
    ADD CONSTRAINT "public_ingredients_recipe_id_fkey" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("recipe_id") ON UPDATE CASCADE ON DELETE SET NULL;

ALTER TABLE ONLY "public"."ratings"
    ADD CONSTRAINT "public_ratings_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."ratings"
    ADD CONSTRAINT "public_ratings_recipe_id_fkey" FOREIGN KEY ("recipe_id") REFERENCES "public"."recipes"("recipe_id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."recipes"
    ADD CONSTRAINT "public_recipes_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE SET NULL;

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK (("auth"."uid"() = "id"));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING (("auth"."uid"() = "id"));

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."comments" TO "anon";
GRANT ALL ON TABLE "public"."comments" TO "authenticated";
GRANT ALL ON TABLE "public"."comments" TO "service_role";

GRANT ALL ON SEQUENCE "public"."comments_comment_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."comments_comment_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."comments_comment_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."ingredients_ingredient_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."ingredients_ingredient_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."ingredients_ingredient_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."ingredients" TO "anon";
GRANT ALL ON TABLE "public"."ingredients" TO "authenticated";
GRANT ALL ON TABLE "public"."ingredients" TO "service_role";

GRANT ALL ON TABLE "public"."likes" TO "anon";
GRANT ALL ON TABLE "public"."likes" TO "authenticated";
GRANT ALL ON TABLE "public"."likes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."likes_like_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."likes_like_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."likes_like_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."ratings" TO "anon";
GRANT ALL ON TABLE "public"."ratings" TO "authenticated";
GRANT ALL ON TABLE "public"."ratings" TO "service_role";

GRANT ALL ON SEQUENCE "public"."ratings_rating_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."ratings_rating_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."ratings_rating_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."recipes_recipe_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."recipes_recipe_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."recipes_recipe_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."recipes" TO "anon";
GRANT ALL ON TABLE "public"."recipes" TO "authenticated";
GRANT ALL ON TABLE "public"."recipes" TO "service_role";

GRANT ALL ON TABLE "public"."steps" TO "anon";
GRANT ALL ON TABLE "public"."steps" TO "authenticated";
GRANT ALL ON TABLE "public"."steps" TO "service_role";

GRANT ALL ON SEQUENCE "public"."steps_step_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."steps_step_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."steps_step_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
